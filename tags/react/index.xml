<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Luna&#39;s Blog</title>
    <link>https://LunaZhuang.github.io/tags/react/</link>
    <description>Recent content in React on Luna&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 18 Sep 2022 23:55:00 +0800</lastBuildDate><atom:link href="https://LunaZhuang.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React-在開始使用React要了解的事之四「不可變性」</title>
      <link>https://LunaZhuang.github.io/blog/react-immutable/</link>
      <pubDate>Sun, 18 Sep 2022 23:55:00 +0800</pubDate>
      
      <guid>https://LunaZhuang.github.io/blog/react-immutable/</guid>
      <description>何謂不可變性： &amp;ldquo;Mutable(可變的)&amp;ldquo;代表是可以被改變的、修改的，而&amp;quot;Immutable(不可變的)&amp;ldquo;則是它的反義詞，代表所有資料不可以被改變或修改的。
JavaScript 並非是純粹的函式導向程式設計，在純函式導向程式設計語言中，所有的物件都是不可變的。在 JavaScript 中的設計是所有基本資料類型如 Undefined, Null, Boolean, Number, String, Symbol 是不可變的，但物件通常是可變的。但在 Array 中有些不可變的方法(意思是會回傳新的陣列，而非直接修改原陣列)，今天這篇的學習文章為不可變性，在函式導向程式設計中，所有資料都是不可變動的。</description>
    </item>
    
    <item>
      <title>React-在開始使用React要了解的事之三「宣告式程式設計」</title>
      <link>https://LunaZhuang.github.io/blog/react-declarative/</link>
      <pubDate>Sun, 11 Sep 2022 21:45:00 +0800</pubDate>
      
      <guid>https://LunaZhuang.github.io/blog/react-declarative/</guid>
      <description>宣告式 vs 命令式的差別 接續上篇的函式導向程式設計，函式導向是屬於宣告式程式設計的一個分支。
宣告式程式設計：它們建造電腦程式的結構和元素，表達計算的邏輯而不用描述它的控制流程。 命令式程式設計：最大的特點是其每行代碼都是一條具體的指令，讓計算機執行具體的操作，通過一系列指令的疊加完成複雜的任務。 差異在於宣告式注重於表達「該做何事(What)」，而命令式則是「如何達成(How)」。 舉例說明： 下列這段程式碼，我要讓陣列裡的每個元素乘於 2，並返回新陣列，所以用 for 迴圈逐一檢查陣列中的元素，並預設一個空陣列把乘好的數字加進新陣列裡，這就是命令式風格關注的重點在於程式該如何達成這個目的，然而當程式碼出現一堆 for、if 等邏輯，通常不太容易了解程式的目的，因此命令式風格必須仰賴大量的註解，才能較好的維護。</description>
    </item>
    
    <item>
      <title>React-在開始使用React要了解的事之二「函式導向程式設計」</title>
      <link>https://LunaZhuang.github.io/blog/react-functionalprogramming/</link>
      <pubDate>Sat, 10 Sep 2022 23:00:00 +0800</pubDate>
      
      <guid>https://LunaZhuang.github.io/blog/react-functionalprogramming/</guid>
      <description>函式導向程式設計 函式導向程式設計與 JavaScript。 學習 React 不可避免地要接觸所謂的函式導向程式設計，畢竟函式編程只是一種程式設計方法，只要程式語言本身可以符合函式編程的基本概念，就可以宣稱用函式編程來開發程式。今天學習的是何謂函式導向。
何謂函式導向： JavaScript 雖然是物件導向，但也支援函式導向程式設計，因為函式在 JavaScript 中是「一級成員」，這就意味著函式具有變數的特質。在近年 JavaScript 完善了對函式導向的支援，包括了箭頭函式、Promise 物件及延展運算子。</description>
    </item>
    
    <item>
      <title>React- 在開始使用React要了解的事之一「模組」</title>
      <link>https://LunaZhuang.github.io/blog/react-module/</link>
      <pubDate>Fri, 09 Sep 2022 21:30:00 +0800</pubDate>
      
      <guid>https://LunaZhuang.github.io/blog/react-module/</guid>
      <description>使用 React 前須知道，何謂模組 在 React 裡很強調模組化，把功能細分成一個個模組，再把它們匯入至上層模組組合起來，所以不同模組間也不容易出現衝突，當其中一個模組出錯也不影響到其他模組。
模組意思：
模組是一段可重複使用的程式碼，他可以輕鬆地被整合進既有的程式，而不產生變數的命名衝突，JavaScript 的模組會被整合成獨立的檔案，ES6 的模組系統使用上相當簡單，各模組有自己的獨立的作用域，所以你必須指示要在應用程式中匯入或輸出哪一些模組。</description>
    </item>
    
  </channel>
</rss>
